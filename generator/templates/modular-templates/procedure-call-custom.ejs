<% 
/* 
request Params - exists only if query params are not empty, otherwise it null
parameters - has parsed path params (name, otional, description, type) and that's all. Fixed structure
*/
%>
<%
const { utils, route, config } = it;
const { requestBodyInfo, responseBodyInfo, specificArgNameResolver } = route;
const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
const { parameters, path, method, payload, query, formData, security, requestParams, pathParams: pathParamsContentRaw } = route.request;
const { type, errorType, contentTypes } = route.response;
const { HTTP_CLIENT, RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;
const routeDocs = includeFile("./route-docs", { config, route, utils });
%>

<%
function getUnwrappedContent(content) {
    return content.replace(/^{\n/, '').replace(/\n}$/, '').replaceAll(',', '').trim()
}

const inputPathParamsContent = pathParamsContentRaw && getUnwrappedContent(pathParamsContentRaw.type) 
const inputPathNamesContent = parameters.map(({name}) => name).join(', ')
const inputQueryContent = query && getUnwrappedContent(query.type)
const routeNameUppper = route.routeName.usage.charAt(0).toUpperCase() + route.routeName.usage.slice(1)
const inputPathInterface = `Input${routeNameUppper}`
const searchParamsInterface = `SearchParams${routeNameUppper}`
const inputClientTypeName = `${routeNameUppper}Input`
const outputClientTypeName = `${routeNameUppper}Output`
const argsContent = [
    (inputPathParamsContent || payload) && `input: ${inputPathParamsContent ? inputPathInterface : payload.type}`,
    inputQueryContent && `searchParams: ${searchParamsInterface}`
].filter(v => Boolean(v)).join(',')
const inputDestructurizedContent = [
    inputPathParamsContent && inputPathNamesContent,
    payload && `...body`
].filter(v => Boolean(v)).join(',')
%>

<% if (pathParamsContentRaw) { %>
interface <%~ inputPathInterface %> <%~ payload ? `extends ${payload.type}` : '' %> {
    <%~ inputPathParamsContent %>
}
<% } %>

<% if (inputQueryContent) { %>
interface <%~ searchParamsInterface %> {
    <%~ inputQueryContent %>
}
<% } %>

type <%~ inputClientTypeName %> = BaseInput & {}
type <%~ outputClientTypeName %> = BaseOutput<<%~ type %>>

/*
 *
<%~ routeDocs.description %>

 *<% /* Here you can add some other JSDoc tags */ %>
 * @author automated
 * @genereated <%~ route.routeName.usage %>
<%~ routeDocs.lines %>

 */
export const <%~ route.routeName.usage %> = (<%~ argsContent %>) => {
    <% if(inputPathParamsContent || payload) { %>
    const { <%~ inputDestructurizedContent %> } = input
    <% } %>
    return new AxiosRestClient<<%~ inputClientTypeName %>, <%~ outputClientTypeName %>>({
        resourcePath: `<%~ path %>`
    }).execute({
        method: '<%~ _.upperCase(method) %>',
        <% if (payload) { %> body, <% } %>
        headers: new Headers({
            // TODO: add appropriate headers
        })<% if (inputQueryContent) { %>,
        searchParams
        <% } %>
        
    });
};